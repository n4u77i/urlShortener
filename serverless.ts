import type { AWS } from '@serverless/typescript';

import functions from './serverless/functions'
import dynamoResources from './serverless/dynamoResources'

const serverlessConfiguration: AWS = {
  service: 'urlshortener',
  frameworkVersion: '3',
  plugins: ['serverless-esbuild'],
  provider: {
    name: 'aws',
    runtime: 'nodejs14.x',
    profile: 'nautti_serverless_dell_user',   // AWS user in credentials file, if left default is used
    region: 'us-east-1',  // Default region (if not mentioned explicitly)
    // Allowing lambda to do anything with Dynamo resource
    iam: {
      role: {
        statements: [
          {
            Effect: "Allow",
            Action: "dynamodb:*",
            // ARN for dynamodb resource 'arn:aws:dynamodb:${self:provider.region}:${aws.accountId}:table/${self:custom.urlTableName}'
            Resource: "*"
            // {
            //   "Fn::Join": [
            //     "",
            //     [
            //       "arn:",
            //       "aws:",
            //       "dynamodb:${aws:region}:${aws.accountId}:",
            //       "table/${self:custom.urlTableName}",
            //     ]
            //   ]
            // }
          }
        ]
      }
    },
    apiGateway: {
      minimumCompressionSize: 1024,
      shouldStartNameWithService: true,
    },
    // Export serverless envs to .env file via plugin: https://www.serverless.com/plugins/serverless-export-env
    environment: {
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
      NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000',
      // Defining custom variables
      urlTableName: '${self:custom.urlTableName}',    // Defining name of table in env variable
      baseUrl: {                                      // We don't want hardcoded URL, so we will get the code generated by API Gateway and join iy
        'Fn::Join': [                                 // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-join.html
          '',                                         // Seperator used in joining, we don't need anything in between the string
          [
            'https://', 
            { Ref: 'HttpApi' },                       // Random ID generated by AWS
            '.execute-api.${self:provider.region}.amazonaws.com',
          ]
        ]
      },
    },
  },
  // import the function via paths
  functions,
  // Add custom resources
  resources: {
    Resources: {
      ...dynamoResources
    }
  },
  package: { individually: true },
  custom: {
    // Defining our custom variable for table name, <sls-stage> variable will allow us to define type of env like dev or prod
    urlTableName: '${sls:stage}-url-table',
    esbuild: {
      bundle: true,
      minify: false,
      sourcemap: true,
      exclude: ['aws-sdk'],
      target: 'node14',
      define: { 'require.resolve': undefined },
      platform: 'node',
      concurrency: 10,
    },
  },
};

module.exports = serverlessConfiguration;
